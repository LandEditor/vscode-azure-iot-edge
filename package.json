{
	"name": "@codeeditorland/iot-edge",
	"displayName": "Azure IoT Edge",
	"description": "This extension is now in maintenance mode. See announcement https://github.com/microsoft/vscode-azure-iot-edge/issues/639#issue-1359146049 and latest documentation here: https://learn.microsoft.com/en-us/azure/iot-edge/how-to-vs-code-develop-module.",
	"main": "./dist/extension",
	"scripts": {
		"compile": "tsc -p ./",
		"webpack": "webpack --mode development",
		"webpack-dev": "webpack --mode development --watch"
	},
	"contributes": {
		"commands": [
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.buildModuleImage",
				"title": "Build IoT Edge Module Image"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.buildAndPushModuleImage",
				"title": "Build and Push IoT Edge Module Image"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.newSolution",
				"title": "New IoT Edge Solution"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.buildSolution",
				"title": "Build IoT Edge Solution"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.buildAndPushSolution",
				"title": "Build and Push IoT Edge Solution"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.buildAndRunSolution",
				"title": "Build and Run IoT Edge Solution in Simulator"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.runSolution",
				"title": "Run IoT Edge Solution in Simulator"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.stopSolution",
				"title": "Stop IoT Edge Simulator"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.generateDeployment",
				"title": "Generate IoT Edge Deployment Manifest"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.addModule",
				"title": "Add IoT Edge Module"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.setupIotedgehubdev",
				"title": "Setup IoT Edge Simulator"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.setDefaultEdgeRuntimeVersion",
				"title": "Set Default IoT Edge Runtime Version"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.startEdgeHubSingle",
				"title": "Start IoT Edge Hub Simulator for Single Module"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.setModuleCred",
				"title": "Set Module Credentials to User Settings"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.setDefaultPlatform",
				"title": "Set Default Target Platform for Edge Solution"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.showGallery",
				"title": "Show Sample Gallery"
			},
			{
				"category": "Azure IoT Edge",
				"command": "azure-iot-edge.addDevContainer",
				"title": "Add Dev Container definition files"
			}
		],
		"configuration": {
			"properties": {
				"azure-iot-edge.3rdPartyModuleTemplates": {
					"default": {},
					"description": "Templates for third party modules",
					"type": "object"
				},
				"azure-iot-edge.EdgeHubConnectionString": {
					"default": "",
					"description": "Module Connection String",
					"type": "string"
				},
				"azure-iot-edge.EdgeModuleCACertificateFile": {
					"default": "",
					"description": "Edge Module CA path",
					"type": "string"
				},
				"azure-iot-edge.defaultPlatform": {
					"default": {
						"alias": null,
						"platform": "amd64"
					},
					"description": "Current default target platform for Edge Module",
					"type": "object"
				},
				"azure-iot-edge.executor.env": {
					"description": "Environment variables for the command executor and Azure IoT Edge terminals",
					"type": "object"
				},
				"azure-iot-edge.platforms": {
					"default": {
						"amd64": [],
						"arm32v7": [],
						"arm64v8": [],
						"windows-amd64": []
					},
					"description": "Edge Module target platforms",
					"type": "object"
				},
				"azure-iot-edge.templateInstall.csfunctionmodule": {
					"default": true,
					"description": "Switch to install C# function module template before scaffolding. Default is true.",
					"type": "boolean"
				},
				"azure-iot-edge.templateInstall.csharpmodule": {
					"default": true,
					"description": "Switch to install C# module template before scaffolding. Default is true.",
					"type": "boolean"
				},
				"azure-iot-edge.templateInstall.nodemodule": {
					"default": true,
					"description": "Switch to install Node.js module template before scaffolding. Default is true.",
					"type": "boolean"
				},
				"azure-iot-edge.terminalRoot": {
					"default": "",
					"description": "(Windows Only) Replace the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash on Windows, Git Bash or Cgywin. Example: For Bash on Windows, setting this to '/mnt/' will replace 'C:\\foo\\bar' with '/mnt/c/foo/bar'",
					"type": "string"
				},
				"azure-iot-edge.version.cmodule": {
					"default": "master",
					"description": "Set the C module template version, which will be referenced during scaffolding C module.",
					"type": "string"
				},
				"azure-iot-edge.version.csfunctionmodule": {
					"default": null,
					"description": "Set the C# function module template version, which will be referenced during scaffolding C# function module.",
					"type": "string"
				},
				"azure-iot-edge.version.csharpmodule": {
					"default": null,
					"description": "Set the C# module template version, which will be referenced during scaffolding C# module.",
					"type": "string"
				},
				"azure-iot-edge.version.default.edgeRuntime": {
					"default": "1.4",
					"description": "Set the edgeAgent and edgeHub images version, which will be referenced in deployment manifest.",
					"type": "string"
				},
				"azure-iot-edge.version.javamodule": {
					"default": null,
					"description": "Set the Java module template version, which will be referenced during scaffolding Java module.",
					"type": "string"
				},
				"azure-iot-edge.version.nodemodule": {
					"default": null,
					"description": "Set the Node.js module template version, which will be referenced during scaffolding Node.js module.",
					"type": "string"
				},
				"azure-iot-edge.version.pythonmodule": {
					"default": "master",
					"description": "Set the Python module template version, which will be referenced during scaffolding Python module.",
					"type": "string"
				},
				"azure-iot-edge.version.supported.edgeRuntime": {
					"default": [
						"1.4"
					],
					"description": "List of supported Edge Runtime images versions",
					"type": "array"
				},
				"azure-iot-edge.version.tempSensor": {
					"default": "1.4",
					"description": "Set the tempSensor image version, which will be referenced in deployment manifest.",
					"type": "string"
				}
			},
			"title": "Azure IoT Edge configuration",
			"type": "object"
		},
		"debuggers": [
			{
				"configurationSnippets": [
					{
						"body": {
							"justMyCode": true,
							"name": "Remote Debug IoT Edge Module (.NET Core)",
							"pipeTransport": {
								"debuggerPath": "~/vsdbg/vsdbg",
								"pipeArgs": [
									"exec",
									"-i",
									"<container_name>",
									"sh",
									"-c"
								],
								"pipeCwd": "^\"\\${workspaceFolder}\"",
								"pipeProgram": "docker",
								"quoteArgs": true
							},
							"processId": "^\"\\${command:pickRemoteProcess}\"",
							"request": "attach",
							"sourceFileMap": {
								"/app": "^\"\\${workspaceFolder}\""
							},
							"type": "coreclr"
						},
						"label": ".NET: Remote Debug IoT Edge Module"
					},
					{
						"body": {
							"args": [],
							"console": "internalConsole",
							"cwd": "^\"\\${workspaceRoot}\"",
							"env": {
								"EdgeHubConnectionString": "^\"\\${config:azure-iot-edge.EdgeHubConnectionString}\"",
								"EdgeModuleCACertificateFile": "^\"\\${config:azure-iot-edge.EdgeModuleCACertificateFile}\""
							},
							"internalConsoleOptions": "openOnSessionStart",
							"name": "Launch IoT Edge Module (.NET Core)",
							"program": "^\"\\${workspaceRoot}/bin/Debug/<target-framework>/<project-name.dll>\"",
							"request": "launch",
							"stopAtEntry": false,
							"type": "coreclr"
						},
						"label": ".NET: Launch a local .NET Core IoT Edge Module"
					}
				],
				"initialConfigurations": [
					{
						"justMyCode": true,
						"name": "Remote Debug IoT Edge Module (.NET Core)",
						"pipeTransport": {
							"debuggerPath": "~/vsdbg/vsdbg",
							"pipeArgs": [
								"exec",
								"-i",
								"<container_name>",
								"sh",
								"-c"
							],
							"pipeCwd": "${workspaceFolder}",
							"pipeProgram": "docker",
							"quoteArgs": true
						},
						"processId": "${command:pickRemoteProcess}",
						"request": "attach",
						"sourceFileMap": {
							"/app": "${workspaceFolder}"
						},
						"type": "coreclr"
					},
					{
						"args": [],
						"console": "internalConsole",
						"cwd": "${workspaceRoot}",
						"env": {
							"EdgeHubConnectionString": "${config:azure-iot-edge.EdgeHubConnectionString}",
							"EdgeModuleCACertificateFile": "${config:azure-iot-edge.EdgeModuleCACertificateFile}"
						},
						"internalConsoleOptions": "openOnSessionStart",
						"name": "Launch IoT Edge Module (.NET Core)",
						"program": "${workspaceRoot}/bin/Debug/<target-framework>/<project-name.dll>",
						"request": "launch",
						"stopAtEntry": false,
						"type": "coreclr"
					}
				],
				"label": "IoT Edge (.NET Core)",
				"type": "edge-coreclr"
			},
			{
				"configurationSnippets": [
					{
						"body": {
							"console": "integratedTerminal",
							"env": {
								"EdgeHubConnectionString": "^\"\\${config:azure-iot-edge.EdgeHubConnectionString}\"",
								"EdgeModuleCACertificateFile": "^\"\\${config:azure-iot-edge.EdgeModuleCACertificateFile}\""
							},
							"name": "Launch IoT Edge Module (Node.js)",
							"program": "^\"\\${workspaceRoot}/app.js\"",
							"request": "launch",
							"type": "node"
						},
						"label": "Node.js: Launch a local IoT Edge Module"
					}
				],
				"initialConfigurations": [
					{
						"address": "<TCP/IP address of the docker container process>",
						"localRoot": "${workspaceFolder}",
						"name": "Remote Debug IoT Edge Module (Node.js)",
						"port": 9229,
						"remoteRoot": "<Absolute path of the program in the docker container>",
						"request": "attach",
						"type": "node"
					},
					{
						"console": "integratedTerminal",
						"env": {
							"EdgeHubConnectionString": "${config:azure-iot-edge.EdgeHubConnectionString}",
							"EdgeModuleCACertificateFile": "${config:azure-iot-edge.EdgeModuleCACertificateFile}"
						},
						"name": "Launch IoT Edge Module (Node.js)",
						"program": "${workspaceRoot}/app.js",
						"request": "launch",
						"type": "node"
					}
				],
				"label": "IoT Edge (Node.js)",
				"type": "edge-node"
			},
			{
				"configurationSnippets": [
					{
						"body": {
							"host": "localhost",
							"logToFile": true,
							"name": "Remote Debug IoT Edge Module (Python)",
							"pathMappings": [
								{
									"localRoot": "^\"\\${workspaceFolder}\"",
									"remoteRoot": "/app"
								}
							],
							"port": 5678,
							"redirectOutput": true,
							"request": "attach",
							"type": "python"
						},
						"label": "Python: Remote Debug IoT Edge Module"
					},
					{
						"body": {
							"console": "integratedTerminal",
							"env": {
								"EdgeHubConnectionString": "^\"\\${config:azure-iot-edge.EdgeHubConnectionString}\"",
								"EdgeModuleCACertificateFile": "^\"\\${config:azure-iot-edge.EdgeModuleCACertificateFile}\""
							},
							"name": "Launch IoT Edge Module (Python)",
							"program": "^\"\\${workspaceFolder}/main.py\"",
							"request": "launch",
							"type": "python",
							"windows": {
								"program": "^\"\\${workspaceFolder}\\\\\\main.py\""
							}
						},
						"label": "Python: Launch a local IoT Edge Module"
					}
				],
				"initialConfigurations": [
					{
						"host": "localhost",
						"logToFile": true,
						"name": "Remote Debug IoT Edge Module (Python)",
						"pathMappings": [
							{
								"localRoot": "${workspaceFolder}",
								"remoteRoot": "<Absolute path of the program in the docker container>"
							}
						],
						"port": 5678,
						"redirectOutput": true,
						"request": "attach",
						"type": "python"
					},
					{
						"console": "integratedTerminal",
						"env": {
							"EdgeHubConnectionString": "${config:azure-iot-edge.EdgeHubConnectionString}",
							"EdgeModuleCACertificateFile": "${config:azure-iot-edge.EdgeModuleCACertificateFile}"
						},
						"name": "Launch IoT Edge Module (Python)",
						"program": "${workspaceFolder}/main.py",
						"request": "launch",
						"type": "python",
						"windows": {
							"program": "${workspaceFolder}\\main.py"
						}
					}
				],
				"label": "IoT Edge (Python)",
				"type": "edge-python"
			}
		],
		"jsonValidation": [
			{
				"fileMatch": "deployment.template.json",
				"url": "http://json.schemastore.org/azure-iot-edge-deployment-template-4.0"
			},
			{
				"fileMatch": "deployment.*.template.json",
				"url": "http://json.schemastore.org/azure-iot-edge-deployment-template-4.0"
			}
		],
		"menus": {
			"explorer/context": [
				{
					"command": "azure-iot-edge.buildModuleImage",
					"group": "edge@0",
					"when": "resourceFilename == module.json"
				},
				{
					"command": "azure-iot-edge.buildAndPushModuleImage",
					"group": "edge@1",
					"when": "resourceFilename == module.json"
				},
				{
					"command": "azure-iot-edge.newSolution",
					"when": "explorerResourceIsFolder == true"
				},
				{
					"command": "azure-iot-edge.addModule",
					"group": "edge@0",
					"when": "resourceFilename == deployment.template.json"
				},
				{
					"command": "azure-iot-edge.buildSolution",
					"group": "edge@1",
					"when": "resourceFilename =~ /^deployment(\\..+)?\\.template\\.json$/"
				},
				{
					"command": "azure-iot-edge.buildAndPushSolution",
					"group": "edge@2",
					"when": "resourceFilename =~ /^deployment(\\..+)?\\.template\\.json$/"
				},
				{
					"command": "azure-iot-edge.buildAndRunSolution",
					"group": "edge@3",
					"when": "resourceFilename =~ /^deployment(\\..+)?\\.template\\.json$/"
				},
				{
					"command": "azure-iot-edge.generateDeployment",
					"group": "edge@4",
					"when": "resourceFilename =~ /^deployment(\\..+)?\\.template\\.json$/"
				},
				{
					"command": "azure-iot-edge.runSolution",
					"group": "edge@0",
					"when": "resourceFilename =~ /^deployment(?!.*\\.template\\.json)(\\.debug)?(\\..+)*\\.json$/"
				},
				{
					"command": "azure-iot-edge.addModule",
					"when": "explorerResourceIsFolder && resourceFilename == modules"
				},
				{
					"command": "azure-iot-edge.addDevContainer",
					"when": "explorerResourceIsFolder"
				}
			],
			"view/item/context": [
				{
					"command": "azure-iot-edge.setupIotedgehubdev",
					"group": "azure-iot-toolkit-edge@2",
					"when": "view == iotHubDevices && viewItem == edge"
				}
			]
		}
	},
	"activationEvents": [
		"onCommand:azure-iot-edge.buildSolution",
		"onCommand:azure-iot-edge.buildAndPushSolution",
		"onCommand:azure-iot-edge.buildAndRunSolution",
		"onCommand:azure-iot-edge.runSolution",
		"onCommand:azure-iot-edge.buildModuleImage",
		"onCommand:azure-iot-edge.buildAndPushModuleImage",
		"onCommand:azure-iot-edge.newSolution",
		"onCommand:azure-iot-edge.generateDeployment",
		"onCommand:azure-iot-edge.addModule",
		"onCommand:azure-iot-edge.stopSolution",
		"onCommand:azure-iot-edge.setupIotedgehubdev",
		"onCommand:azure-iot-edge.setDefaultEdgeRuntimeVersion",
		"onCommand:azure-iot-edge.startEdgeHubSingle",
		"onCommand:azure-iot-edge.setModuleCred",
		"onCommand:azure-iot-edge.setDefaultPlatform",
		"onCommand:azure-iot-edge.showGallery",
		"onCommand:azure-iot-edge.addDevContainer",
		"workspaceContains:**/deployment.template.json"
	],
	"dependencies": {
		"axios": "1.7.9",
		"body-parser": "1.20.3",
		"dotenv": "16.4.7",
		"download-git-repo": "3.0.2",
		"fs-extra": "11.3.0",
		"is-port-reachable": "4.0.0",
		"json-source-map": "0.6.1",
		"jsonc-parser": "3.3.1",
		"qs": "6.14.0",
		"semver": "7.7.1",
		"strip-json-comments": "5.0.1",
		"tmp": "0.2.3",
		"unzipper": "0.12.3"
	},
	"devDependencies": {
		"@types/body-parser": "1.19.5",
		"@types/dotenv": "8.2.3",
		"@types/fs-extra": "11.0.4",
		"@types/node": "22.13.4",
		"@types/semver": "7.5.8",
		"@types/sinon": "17.0.3",
		"@types/strip-json-comments": "3.0.0",
		"@types/tmp": "0.2.6",
		"@types/unzipper": "0.10.10",
		"glob": "11.0.1",
		"minimist": "1.2.8",
		"sinon": "19.0.2",
		"ts-loader": "9.5.2"
	},
	"extensionDependencies": [
		"ms-vscode.azure-account",
		"vsciot-vscode.azure-iot-toolkit"
	],
	"icon": "logo.png",
	"aiKey": "95b20d64-f54f-4de3-8ad5-165a75a6c6fe"
}
